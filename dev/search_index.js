var documenterSearchIndex = {"docs":
[{"location":"refs-api/#Reference","page":"Public","title":"Reference","text":"","category":"section"},{"location":"refs-api/#Simplicial-Complexes","page":"Public","title":"Simplicial Complexes","text":"","category":"section"},{"location":"refs-api/#Construction","page":"Public","title":"Construction","text":"","category":"section"},{"location":"refs-api/","page":"Public","title":"Public","text":"SimplicialComplex\ninsert!(::SimplicialComplex, s)\nskeleton","category":"page"},{"location":"refs-api/#Hodge.SimplicialComplex","page":"Public","title":"Hodge.SimplicialComplex","text":"SimplicialComplex\n\nRepresent an abstract simplicial complex where all vertices are labeled by integers.\n\nInternally, use the SimplexTrees.SimplexTree data structure.\n\n\n\n\n\n","category":"type"},{"location":"refs-api/#Base.insert!-Tuple{SimplicialComplex,Any}","page":"Public","title":"Base.insert!","text":"insert!(sc::SimplicialComplex, σ)\n\nInsert the simplex σ and all its faces on the SimplicialComplex sc.\n\nThe simplex does not need to be ordered.\n\n\n\n\n\n","category":"method"},{"location":"refs-api/#Hodge.skeleton","page":"Public","title":"Hodge.skeleton","text":"skeleton(sc, k)\n\nReturn the k-skeleton of a SimplicialComplex. That is, a SimplicialComplex with the same simplices as sc up to dimension k.\n\n\n\n\n\n","category":"function"},{"location":"refs-api/#Accessing","page":"Public","title":"Accessing","text":"","category":"section"},{"location":"refs-api/","page":"Public","title":"Public","text":"dimension\nhassimplex\nvertices\nnumvertices\nsimplices\nnumsimplices","category":"page"},{"location":"refs-api/#Hodge.dimension","page":"Public","title":"Hodge.dimension","text":"dimension(sc)\n\nReturn the dimension of the largest simplex on a SimplicialComplex.\n\n\n\n\n\n","category":"function"},{"location":"refs-api/#Hodge.hassimplex","page":"Public","title":"Hodge.hassimplex","text":"hassimplex(sc, σ)\n\nTest whether the SimplicialComplex sc contains the simplex σ.\n\n\n\n\n\n","category":"function"},{"location":"refs-api/#Hodge.vertices","page":"Public","title":"Hodge.vertices","text":"vertices(sc)\n\nReturn an array containg the vertices of the SimplicialComplex sc.\n\nSee also simplices. Notice that this function returns an array of integers while simplices(sc, 0) returns an array of singleton arrays containing the vertices.\n\n\n\n\n\n","category":"function"},{"location":"refs-api/#Hodge.numvertices","page":"Public","title":"Hodge.numvertices","text":"numvertices(sc)\n\nReturn how many vertices (1-simplices) the SimplicialComplex sc has.\n\n\n\n\n\n","category":"function"},{"location":"refs-api/#Hodge.simplices","page":"Public","title":"Hodge.simplices","text":"simplices(sc[, k])\n\nReturn all simplices of the SimplicialComplex sc whose dimension equals k.\n\nIf the parameter k is not given, return all simplices of sc including the empty face.\n\n\n\n\n\n","category":"function"},{"location":"refs-api/#Hodge.numsimplices","page":"Public","title":"Hodge.numsimplices","text":"numsimplices(sc[, k])\n\nReturn the number of k-dimensional simplices of sc.\n\nIf the parameter k is not given, return the total number of simplices including the empty face.\n\nThis function is a more efficient implementation of length ∘ simplices.\n\n\n\n\n\n","category":"function"},{"location":"refs-api/#Topological-Operators","page":"Public","title":"Topological Operators","text":"","category":"section"},{"location":"refs-api/","page":"Public","title":"Public","text":"euler_characteristic\nbetti","category":"page"},{"location":"refs-api/#Hodge.euler_characteristic","page":"Public","title":"Hodge.euler_characteristic","text":"euler_characteristic(K)\n\nReturn the Euler characteristic of a SimplicialComplex.\n\n\n\n\n\n","category":"function"},{"location":"refs-api/#Hodge.betti","page":"Public","title":"Hodge.betti","text":"betti(K)\n\nReturn the Betti numbers of a SimplicialComplex.\n\n\n\n\n\n","category":"function"},{"location":"refs-api/#Cochains","page":"Public","title":"Cochains","text":"","category":"section"},{"location":"refs-api/#Construction-2","page":"Public","title":"Construction","text":"","category":"section"},{"location":"refs-api/","page":"Public","title":"Public","text":"Cochain\nzero_cochain\nindicator_cochain","category":"page"},{"location":"refs-api/#Hodge.Cochain","page":"Public","title":"Hodge.Cochain","text":"Cochain{R, n}\n\nRepresent the n-th group C^n(K R) of cochains over the ring R whose basespace is the simplicial complex K.\n\nFor constructing Cochains, see also the methods zero_cochain and indicator_cochain.\n\nThe elements of this type may be seem as functions from the n-simplices of K to R or as skew-symmetric n-tensors over the vertices of K. This second perspective follows the ideas from the paper:\n\nJiang, X., Lim, L., Yao, Y. et al. Statistical ranking and combinatorial Hodge theory. Math. Program. 127, 203–244 (2011). https://doi.org/10.1007/s10107-010-0419-x\n\n\n\n\n\n","category":"type"},{"location":"refs-api/#Hodge.zero_cochain","page":"Public","title":"Hodge.zero_cochain","text":"zero_cochain(R, K, n)\n\nConstruct an identically zero n-cochain over R and whose base space is K.\n\n\n\n\n\n","category":"function"},{"location":"refs-api/#Hodge.indicator_cochain","page":"Public","title":"Hodge.indicator_cochain","text":"indicator_cochain(R, K, σ)\n\nReturn the indicator function f of the n-simplex σ as a Cochain. That is, a cochain such that f(σ) = 1 and  f(τ) = 0 for all other n-simplices of K.\n\nNotice that, nevertheless, f is still skew-symmetric over permutations of σs indices.\n\nIf Κ does not contain σ, the returned cochain is identically zero.\n\n\n\n\n\n","category":"function"},{"location":"refs-api/#Operators","page":"Public","title":"Operators","text":"","category":"section"},{"location":"refs-api/","page":"Public","title":"Public","text":"basespace\nbasering\ndegree\nnorm\nnorm2\ninner\ncup\ncoboundary\ncoboundary_adj\nlaplacian\nhodge","category":"page"},{"location":"refs-api/#Hodge.basespace","page":"Public","title":"Hodge.basespace","text":"basespace(ω::Cochain)\n\nReturn the simplicial complex that ω is associated with.\n\n\n\n\n\n","category":"function"},{"location":"refs-api/#Hodge.basering","page":"Public","title":"Hodge.basering","text":"basering(ω::Cochain)\n\nReturn the Ring that ω is defined over.\n\n\n\n\n\n","category":"function"},{"location":"refs-api/#Hodge.degree","page":"Public","title":"Hodge.degree","text":"degree(ω::Cochain)\n\nReturn the degree of a Cochain.\n\n\n\n\n\n","category":"function"},{"location":"refs-api/#Hodge.norm","page":"Public","title":"Hodge.norm","text":"norm(ω[, p])\n\nCalculate the p-norm of the Cochain ω.\n\nBy default, p=2.\n\nReturn a floating point, no matter the base ring of ω.\n\n\n\n\n\n","category":"function"},{"location":"refs-api/#Hodge.norm2","page":"Public","title":"Hodge.norm2","text":"norm2(ω)\n\nCalculate the square of the usual inner product norm of a Cochain ω.\n\n\n\n\n\n","category":"function"},{"location":"refs-api/#Hodge.inner","page":"Public","title":"Hodge.inner","text":"inner(ω, ξ)\n\nUsual inner product between Cochains.\n\nwarning: Warning\nFor complex Cochains, the conjugation is taken on the first entry.\n\nThis inner product sees a n-cochain as a free vector space over the (non-oriented) n-simplices of their base space. Formally,\n\nsum_sigma in mathrmsimplices(Kn) overlinef(σ) g(σ)\n\n\n\n\n\n","category":"function"},{"location":"refs-api/#Hodge.cup","page":"Public","title":"Hodge.cup","text":"cup(ω, ξ)\n\nThe cup product omega smile xi of two Cochains.\n\n\n\n\n\n","category":"function"},{"location":"refs-api/#Hodge.coboundary","page":"Public","title":"Hodge.coboundary","text":"coboundary(ω)\n\nThe coboundary or discrete exterior derivative of a Cochain.\n\nThe coboundary of ω applied to a simplex σ equals the alternating sum of ω applied to the faces of σ.\n\n\n\n\n\n","category":"function"},{"location":"refs-api/#Hodge.coboundary_adj","page":"Public","title":"Hodge.coboundary_adj","text":"coboundary_adj(ω)\n\nThe adjoint of the coboundary with respect to usual inner product.\n\n\n\n\n\n","category":"function"},{"location":"refs-api/#Hodge.laplacian","page":"Public","title":"Hodge.laplacian","text":"laplacian(ω)\n\nThe (higher-order) laplacian of ω, defined as\n\n    delta = d d^* + d^* d\n\nwhere d and d^* are, respectively, the coboundary and coboundary_adj operators.\n\n\n\n\n\n","category":"function"},{"location":"refs-api/#Hodge.hodge","page":"Public","title":"Hodge.hodge","text":"hodge(ω)\n\nHodge decomposition of a Cochain using inner as the inner product.\n\nReturn a tuple (α,β,γ) such that\n\nω == coboundary(α) + coboundary_adj(β) + γ\nlaplacian(γ) == 0\n\n\n\n\n\n","category":"function"},{"location":"#Hodge.jl","page":"Introduction","title":"Hodge.jl","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"This package exports two main types, SimplicialComplex and Cochain, together with methods to work with their topological and algebraic properties.","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"The topological operations on this package are all done via the discrete laplacian operator. This includes the method betti, which calculates the Betti numbers of a simplicial complex, and the method hodge which calculates the discrete Hodge decomposition of a cochain.","category":"page"},{"location":"#Installation","page":"Introduction","title":"Installation","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"This package can be installed using the Julia Package Manager. Simply open the REPL, enter ] and run","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"pkg> add Hodge","category":"page"},{"location":"#Bibliography","page":"Introduction","title":"Bibliography","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"Hodge.jl is based on a scientific initiation that I did with Prof. João Paixão while an undergraduate at UFRJ.","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"The simplicial complex type is built upon the Simplex Tree data structure, described on the paper:","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"Jean-Daniel Boissonnat, Clément Maria. The Simplex Tree: An Efficient Data Structure for General Simplicial Complexes. [Research Report] RR-7993, 2012, pp.20. hal-00707901v1","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"The idea of representing cochains as skew-symmetric tensors and using them to write the discrete Hodge decomposition was taken from the paper:","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"Jiang, X., Lim, L., Yao, Y. et al. Statistical ranking and combinatorial Hodge theory. Math. Program. 127, 203–244 (2011). https://doi.org/10.1007/s10107-010-0419-x","category":"page"},{"location":"refs-simplextree/#SimplexTree","page":"Internal","title":"SimplexTree","text":"","category":"section"},{"location":"refs-simplextree/","page":"Internal","title":"Internal","text":"This is an internal module used for representing simplicial complexes.","category":"page"},{"location":"refs-simplextree/","page":"Internal","title":"Internal","text":"The methods in here allow for low level manipulation of the simplicial structure and may break the representation assumptions made throughout the remainder of the code. Only use these if you know what you are doing (and really need to do that).","category":"page"},{"location":"refs-simplextree/","page":"Internal","title":"Internal","text":"Modules = [Hodge.SimplexTrees]\nOrder   = [:module, :type, :function, :constant, :macro]","category":"page"},{"location":"refs-simplextree/#Hodge.SimplexTrees.SimplexTree","page":"Internal","title":"Hodge.SimplexTrees.SimplexTree","text":"Store a simplicial complex using the Simplex Tree data structure.\n\nBased on the paper:\n\nJean-Daniel Boissonnat, Clément Maria. The Simplex Tree: An Efficient Data Structure for General Simplicial Complexes. [Research Report] RR-7993, 2012, pp.20. hal-00707901v1\n\n\n\n\n\n","category":"type"},{"location":"refs-simplextree/#Hodge.SimplexTrees.child_from_label-Tuple{Hodge.SimplexTrees.SimplexTree,Integer}","page":"Internal","title":"Hodge.SimplexTrees.child_from_label","text":"child_from_label(node, j)\n\nReturn the child of node whose label is j. If no child has label j, return nothing.\n\n\n\n\n\n","category":"method"},{"location":"refs-simplextree/#Hodge.SimplexTrees.children_label-Tuple{Hodge.SimplexTrees.SimplexTree}","page":"Internal","title":"Hodge.SimplexTrees.children_label","text":"children_label(node)\n\nReturn an array containing the labels of node's children.\n\n\n\n\n\n","category":"method"},{"location":"refs-simplextree/#Hodge.SimplexTrees.foldST-Tuple{Any}","page":"Internal","title":"Hodge.SimplexTrees.foldST","text":"foldST(st::SimplexTree; basecase, joiner)\n\nFold st applying the function basecase to the leafs and joining siblings using the function joiner.\n\n\n\n\n\n","category":"method"},{"location":"refs-simplextree/#Hodge.SimplexTrees.foldST_depth-Tuple{Any,Any}","page":"Internal","title":"Hodge.SimplexTrees.foldST_depth","text":"foldST_depth(st::SimplexTree, depth; basecase, joiner)\n\nFold st until a given depth applying the function basecase to the leafs and joining siblings vi a the function joiner.\n\nSee also foldST.\n\n\n\n\n\n","category":"method"},{"location":"refs-simplextree/#Hodge.SimplexTrees.getnode-Tuple{Hodge.SimplexTrees.SimplexTree,Any}","page":"Internal","title":"Hodge.SimplexTrees.getnode","text":"getnode(root, s)\n\nReturn the node of the SimplexTree rooted at root representing the simplex s. If s is not in the complex, return nothing.\n\n\n\n\n\n","category":"method"},{"location":"refs-simplextree/#Hodge.SimplexTrees.getsimplices-Tuple{Hodge.SimplexTrees.SimplexTree,Integer}","page":"Internal","title":"Hodge.SimplexTrees.getsimplices","text":"getsimplices(st, k)\n\nReturn all the k-simplices of complex.\n\n\n\n\n\n","category":"method"},{"location":"refs-simplextree/#Hodge.SimplexTrees.haschild-Tuple{Hodge.SimplexTrees.SimplexTree,Integer}","page":"Internal","title":"Hodge.SimplexTrees.haschild","text":"haschild(node, j)\n\nTest whether node has a child with label j.\n\n\n\n\n\n","category":"method"},{"location":"refs-simplextree/#Hodge.SimplexTrees.hassimplex-Tuple{Hodge.SimplexTrees.SimplexTree,Any}","page":"Internal","title":"Hodge.SimplexTrees.hassimplex","text":"hassimplex(node, s)\n\nTest whether the SimplexTree rooted at node contains the simplex s.\n\n\n\n\n\n","category":"method"},{"location":"refs-simplextree/#Hodge.SimplexTrees.insert!-Tuple{Hodge.SimplexTrees.SimplexTree,Any}","page":"Internal","title":"Hodge.SimplexTrees.insert!","text":"insert!(complex, simplex)\n\nInsert a simplex and all its faces on an existing simplicial complex.\n\n\n\n\n\n","category":"method"},{"location":"refs-simplextree/#Hodge.SimplexTrees.isemptyface-Tuple{Hodge.SimplexTrees.SimplexTree}","page":"Internal","title":"Hodge.SimplexTrees.isemptyface","text":"isemptyface(node)\n\nTest whether node represents an empty simplex.\n\n\n\n\n\n","category":"method"},{"location":"refs-simplextree/#Hodge.SimplexTrees.isleaf-Tuple{Hodge.SimplexTrees.SimplexTree}","page":"Internal","title":"Hodge.SimplexTrees.isleaf","text":"isleaf(node)\n\nTest whether node is a leaf of a SimplexTree.\n\n\n\n\n\n","category":"method"},{"location":"refs-simplextree/#Hodge.SimplexTrees.numsimplices-Tuple{Hodge.SimplexTrees.SimplexTree,Integer}","page":"Internal","title":"Hodge.SimplexTrees.numsimplices","text":"numsimplices(st, k)\n\nReturn the number of k-simplices of st.\n\nThis is a more efficient implementation of length ∘ getsimplices.\n\n\n\n\n\n","category":"method"}]
}
